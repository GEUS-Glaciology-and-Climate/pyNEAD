#+TITLE: pyNEAD - Python interface to NEAD file format


* Table of contents                               :toc_3:noexport:
- [[#citation][Citation]]
  - [[#file-format][File format]]
- [[#warning][WARNING]]
- [[#installation][Installation]]
- [[#usage][Usage]]

* Citation

Iosifescu Enescu, I., Bavay, M., Plattner, G.-K. (2020). Sharing and reusing meteorological data. WMO Data Conference 2020 - Earth System Data Exchange in the 21st Century (Virtual Conference).

** File format

The NEAD file format is document at https://github.com/GEUS-PROMICE/NEAD

* WARNING

+ This is alpha level software under development.
+ Please contact Ken Mankoff <kdm@geus.dk> before using.

* Installation

#+BEGIN_SRC bash :results verbatim
pip install git+https://github.com/GEUS-PROMICE/pyNEAD.git
#+END_SRC

Can be run in new environment, for example:

Conda:

#+BEGIN_SRC bash :results verbatim
conda create -n NEAD python=3.8 pandas numpy xarray # jupyter
conda activate NEAD
pip install --upgrade git+https://github.com/GEUS-PROMICE/pyNEAD.git
#+END_SRC

* Usage
:PROPERTIES:
:header-args:jupyter-python+: :kernel PROMICE_dev :session nead :exports both :results raw drawer :exports both
:END:

Read a NEAD file:

#+NAME: nead-read-simple
#+BEGIN_SRC jupyter-python :exports code
import nead
ds = nead.read("sample_csv.dsv")
print(ds)
#+END_SRC

#+RESULTS: nead-read-simple
#+begin_example
<xarray.Dataset>
Dimensions:    (index: 3)
Coordinates:
  ,* index      (index) int64 0 1 2
Data variables:
    timestamp  (index) object '2010-06-22T12:00:00' ... '2010-06-22T14:00:00'
    TA         (index) float64 2.0 3.0 2.8
    RH         (index) float64 52.0 60.0 56.0
    VW         (index) float64 1.2 2.4 2.0
    ISWR       (index) float64 320.0 340.0 330.0
Attributes:
    station_id:       test_station
    latitude:         46.5
    longitude:        9.8
    altitude:         1500
    nodata:           -999
    tz:               1
    field_delimiter:  ,
#+end_example

Convert to MKS units and also pass arguments to the Pandas [[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html][read_csv]] command:

#+NAME: nead-read-complex
#+BEGIN_SRC jupyter-python :exports code
import nead
ds = nead.read("sample_csv.dsv", MKS=True, index_col=0)
print(ds)
#+END_SRC

#+RESULTS: nead-read-complex
#+begin_example
<xarray.Dataset>
Dimensions:    (timestamp: 3)
Coordinates:
  ,* timestamp  (timestamp) object '2010-06-22T12:00:00' ... '2010-06-22T14:00...
Data variables:
    TA         (timestamp) float64 275.1 276.1 275.9
    RH         (timestamp) float64 0.52 0.6 0.56
    VW         (timestamp) float64 1.2 2.4 2.0
    ISWR       (timestamp) float64 320.0 340.0 330.0
Attributes:
    station_id:       test_station
    latitude:         46.5
    longitude:        9.8
    altitude:         1500
    nodata:           -999
    tz:               1
    field_delimiter:  ,
#+end_example

You can access the per-variable properties or the NEAD header properties in the =.attrs= dictionary.

Details about one variable:

#+BEGIN_SRC jupyter-python :exports both
import nead
ds = nead.read("sample_csv.dsv", index_col=0)
print(ds['TA'])
#+END_SRC

#+RESULTS:
: <xarray.DataArray 'TA' (timestamp: 3)>
: array([2. , 3. , 2.8])
: Coordinates:
:   * timestamp  (timestamp) object '2010-06-22T12:00:00' ... '2010-06-22T14:00...
: Attributes:
:     add_value:     273.15
:     scale_factor:  1.0

Access the attributes dictionary

#+BEGIN_SRC jupyter-python :exports both
print(ds['TA'].attrs)
#+END_SRC

#+RESULTS:
: {'add_value': 273.15, 'scale_factor': 1.0}

Access the global attributes:

#+BEGIN_SRC jupyter-python :exports both
for k in ds.attrs.keys():
    print(k, " : ", ds.attrs[k])
#+END_SRC

#+RESULTS:
: station_id  :  test_station
: latitude  :  46.5
: longitude  :  9.8
: altitude  :  1500
: nodata  :  -999
: tz  :  1
: field_delimiter  :  ,
